unittest\pytest区别：

pip install pytest

1) 编写用例上：
   unittest：测试类 继承unittest.TestCase
   pytest：函数/类(Test)里面的方法 test_开头

2) 用例收集上：
   unittest: testsuite装用例，运行
   pytest: 自动识别用例
   识别用例的规则(编写pytest用例的规则):
   1) 根目录? 在哪个目录下运行pytest，就用哪里作为根目录，按照命令行的方式输入pytest运行
   2) 文件? 命名：test_*.py 或者*_test.py
   3) 函数?类? 用例命名：test_开头 Test开头的类(没有__init__)下的test_开头的方法
   pytest执行：使用命令行或者pytest.main()
   ps: 用例执行顺序?
       1) 按照文件排序(ascii)：先识别的文件，里面的用例先执行
       2) 文件内部，按照代码先后顺序执行
3) 用例断言上：
   unittest 使用self.assertEqual(a,b)
   pytest 使用assert 表达式(结果是True,False) - 逻辑/比较/函数返回值
4) 用例报告上：
   unittest/pytest --html 但是pytest可以集成第三方报告工具-allure
   pytest有非常丰富的插件 700+

pytest如何表达前置后置?(不可以与unittest、ddt共存，一山不容二虎)
unittest: 用例级别，测试类中有setUp、tearDown  测试类级别，测试类中有setUpClass、tearDownClass
pytest: fixture - 包括前置与后置
        级别：1、用例会话级别(session)级别
             2、模块(.py/module)级别
             3、测试类(class)级别
             4、测试用例(def/function)级别

        定义：一个函数包含前置和后置
             1) 怎么区分前置和后置? 通过yield来间隔前置和后置
             2) 函数名称可以随便定义，如何将函数识别为前置后置?
             函数上面加@pytest.fixture

        fixture默认作用范围是测试用例级别
        调用(与测试用例关联)：
        类前面：@pytest.mark.usefixtures("fixture的函数名称")
        测试函数前面：@pytest.mark.usefixtures("fixture的函数名称")

pytest参数化
    在测试用例的上面加上：
    @pytest.mark.parametrize("参数名", 列表数据)
    参数名：用来接收每一项数据，并作为测试用例的参数
    列表数据：一组测试数据
    @pytest.mark.parametrize("参数1,参数2", [数据1,数据2],[数据1,数据2])
    示例：
    @pytest.mark.parametrize("a,b,c", [(1,3,4),(10,35,45),(22,22,22)])
    def test_add(a,b,c):
        res = a + b
        assert res == c

    组合参数化：多组参数，依次组合
    使用多个@pytest.mark.parametrize()
    示例：用例有4个：0,2/0,3/1,2/1,3 笛卡尔积
    @pytest.mark.parametrize("x", [0, 1])
    @pytest.mark.parametrize("y", [2, 3])
    def test_foo(x, y):
        pass

pytest-mark-注册
注册方式(主要用第一种方式)：
1、创建pytest.ini文件，在文件中按如下形式添加标签名：
[pytest]
markers =
    slow:marks tests as slow (deselect with '-m' not slow)
    serial
注：冒号之后是可选的描述信息

2、在conftest.py文件中，通过hook注册：
def pytest_configure(config):
    config.addinivalue_line("markers", "smoke1:标记只运行冒烟用例")
    config.addinivalue_line("markers", "demo1:示例运行")

筛选用例：给用例打标记
1、向pytest注册你的标记 pytest.ini
2、在需要标记的用例上面，打上标记
@pytest.mark.标记名
3、运行已标记的用例 pytest参数： -m 标签名

pytest重运行机制
    pytest提供了失败重试机制
    插件安装：rerunfailures
    安装方法：pip install pytest-rerunfailures
    使用方式：
    命令行参数形式：
    命令：pytest --reruns 重试次数
    比如：pytest --reruns 2 表示：运行失败的用例重新运行2次
    命令：pytest --reruns 重试次数 --reruns-delay 次数之间的延时设置(单位：秒)
    pytest --reruns 2 --reruns-delay 5
    表示失败的用例可以重新运行2次，第一次和第二次之间间隔时间为5秒钟

pytest生成测试报告
pytest可以生成多种样式的结果：
1、生成JunitXML格式的测试报告：命令：--junitxml=path
2、生成result log格式的测试报告：命令：--resultlog=report\log.txt
3、生成Html格式的测试报告：命令：--html=report\test_one_func.html(相对路径)(需要安装pytest-html插件)

allure报告
https://docs.qameta.io/allure/(allure官方文档)
https://www.cnblogs.com/Simple-Small/p/11512337.html
安装pytest适配allure的插件： pip install allure-pytest(插件名称不一定一直叫这个，可以上官方文档查看最新插件名称)

1、安装allure工具
    安装allure可以通过各个系统的命令行安装，还可以通过手动下载安装
    进入 https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/
    下载最新版本的zip文件，可以支持多个平台，解压完成后进入bin目录，将bin目录的地址配置在环境变量
2、让pytest生成allure能够识别的测试结果文件
3、运行allure将测试结果展示出来
    allure serve 测试结果文件的路径


jenkins主从模式
master-slave 1个master vs 多个slave
是不是只有一个jenkins? 只有master上有jenkins jenkins具备管理功能
主从模式不支持master和slave是同一个电脑










